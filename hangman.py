from sys import argv
 
def debug():
  if len(argv) > 4:
    debug = True
  else:
    debug = False
  return debug

 
def run():
  with open(argv[1]) as f:
   words = f.read().splitlines()
  debugMode = debug()

  playing = True
  while playing:
    wordLength = int(argv[2])
    guessesAllowed = int(argv[3])
    remainingWords = getWords(words, wordLength)
    underscore = initializeUnderscore(wordLength)
    missedLetters = []
    printedMissedLetters = []
    
    stillPlaying = True
    while stillPlaying:
      if debugMode:
        print(f"{len(remainingWords)} words left.")

      print(underscore)
      guess = promptGuess(printedMissedLetters, guessesAllowed, debugMode)
      missedLetters.append(guess)
      printedMissedLetters.append(guess)
      guessesAllowed -= 1
      if debugMode:
        if len(remainingWords) != 1:
          printRemainingWords(remainingWords, guess, debugMode)

      remainingWords = getRemainingWords(guess, remainingWords, guessesAllowed, wordLength)
      underscore = getUnderscore(remainingWords[0], missedLetters)
      if debugMode:
        if len(remainingWords) == 1:
          print(f"{underscore}:1")
          print("")
      if guess in underscore:
        guessesAllowed += 1
        printedMissedLetters.remove(guess)

      if "_" not in underscore:
        stillPlaying = False
        print(f"You guessed the word: {underscore}")
        playing = False

      if guessesAllowed == 0 and stillPlaying == True:
        stillPlaying = False
        print(f"You lost after {int(argv[3])} wrong guesses.")
        playing = False
  return

"""
  the printRemainingWords function attempts to print the values in the dictionary of possible words that the user is guessing, however this function is unfinished.
"""
def printRemainingWords(remainingWords, guess, debugMode):
  dictionary = generateDictionary(remainingWords, guess)
  sortedTuples = sorted(dictionary.items(), key=lambda t: t[::-1])
  dictionary = {k: v for k, v in sortedTuples}
  for key, value in dictionary.items():
    print(f"{key}:{value}")
  print()
  return

"""
  the getUnderscore function takes the string remainingWord and iterates through the letters of that words to replace any letters in remainingWord with an underscore if it is not in the string missingLetters.
"""
def getUnderscore(remainingWord, missedLetters):
  underscore = ""
  for letter in remainingWord:
    if letter in missedLetters:
      underscore += letter
    else: 
      underscore += "_"
  return underscore

"""
  the printRemainingWords function gets a dictionary from the generateDictionary function and initilizes the underscore with the initializeUnderscore function. A variable then determines if there are zero guesses left for the user and it questions wether the beginning underscore is in dictionary. If yes then underscore is initalized once again, if not, underscore is set to the value returned by the function getDictionaryMaxValue. A new list of words is generated by the function generateWordList.
"""
def getRemainingWords(guess, remainingWords, guessesAllowed, wordLength):
  dictionary = generateDictionary(remainingWords, guess)
  underscore = initializeUnderscore(wordLength)
  notGuess = guessesAllowed == 0 and underscore in dictionary
  if(notGuess):
    underscore = initializeUnderscore(wordLength)
  else:
    underscore = getDictionaryMaxValue(dictionary)
  words = generateWordList(remainingWords, guess, underscore)
  return words

"""
  the generateWordList function returns a new list of words which is functions in the same manner as generateDictionary but instead of dictionary functions, it uses list functions, and returns a list of words from remainingWords whose underscores match those of the underscore in the parameter.  
"""
def generateWordList(remainingWords, guess, underscore):
  words = []
  for word in remainingWords:
    underscore2 = ""
    for letter in word:
      if letter == guess:
        underscore2 += guess
      else:
        underscore2 += "_"  
      if underscore2 == underscore:
        words.append(word)
  return words

"""
  the getDictionaryMaxValue function finds the dictionary key with the highest value amount and returns that key
"""
def getDictionaryMaxValue(dictionary):
  underscore = ""
  maxCount = 0
  for values in dictionary:
    if dictionary[values] > maxCount:
      maxCount = dictionary[values]
      underscore = values
  return underscore

"""
  the generateDictionary function iterates through the words in the remainingWords parameter, iterates through the letters in each word, and if a letter matches the parameter guess, it is added to a blank string underscore, if it does not match, an underscore is added, at the end of this loop there should be a complete word with every letter that is not the guess replaced by an underscore. then the underscore is added to a dictionary with its value as 1, and if the underscore is already in the dictionary, the value is increased by 1. This dictionary is returned.
"""
def generateDictionary(remainingWords, guess):
  dictionary = {}
  for word in remainingWords:
    underscore = ""
    for letter in word:
      if letter == guess:
        underscore += guess
      else:
          underscore += "_"
    if underscore not in dictionary:
      dictionary[underscore] = 1
    else:
      dictionary[underscore] = dictionary[underscore] + 1
  return dictionary

"""
  the promptGuess function prints the the list of missed letters, the amount of guesses left, and it prompts the user to enter a new guess.
"""
def promptGuess(printedMissedLetters, guessesAllowed, debugMode):
  string = " "
  print(f"missed letters: {string.join(printedMissedLetters)} ({guessesAllowed} chances left)")
  guess = input("Enter your guess: ")
  if not debugMode:
    print()
  return guess

"""
  the initializeUnderscore function returns the initial underscore by adding underscores, "_", to an empty string wordLength number of times.
"""
def initializeUnderscore(wordLength):
  underscore = ""
  for i in range(wordLength):
    underscore += "_"
  return underscore

"""
  the getWords function takes the parameter words, which is a list of words from the file, and only adds the words whose length equals the parameter wordLength to a new list named NewWords and returns that.
"""
def getWords(words, wordLength):
  newWords = []
  for word in words:
    if len(word) == wordLength:
      newWords.append(word)
  return newWords
 
if __name__ == '__main__':
 run()